Enrollment No,What is the time complexity of searching for an element in an unsorted array? (Theoretical),What is the advantage of arrays in terms of accessing elements? (Understanding),What is the result of sorting an array before performing a binary search? (Pseudocode),What is the disadvantage of doubly linked lists compared to singly linked lists? (Understanding),What is the time complexity of summing elements in an array using a simple algorithm? (Pseudocode),What is the primary advantage of binary search trees over arrays? (Theoretical),What is the property of a Max-Heap that ensures finding the maximum element can be done in constant time? (Theoretical),What is the purpose of balanced trees like AVL and Red-Black trees? (Theoretical),What is the time complexity of insertion and deletion operations in a balanced binary search tree? (Theoretical),What is the advantage of arrays in terms of memory efficiency? (Understanding),What is the disadvantage of arrays in terms of insertion and deletion? (Understanding),What is the application of linked lists in memory management systems? (Remembering),What is the characteristic of a binary search tree that allows for fast lookup operations? (Theoretical),What is the time complexity of searching for an element in a binary search tree? (Theoretical),What is the application of heaps in real-world scenarios? (Remembering)
23071586,C) O(1),B) Fixed Size,D) O(1) time complexity,C) Less efficient deletion,A) O(n log n),A) Faster search times,C) The value of each node is equal to the values of its children,B) To increase the height of the tree,D) O(1),B) Contiguous memory requirement,D) Dynamic size,C) Efficient searching,D) The value of the left child is equal to its parent node,D) O(1),B) Priority queues and scheduling systems
23070530,C) O(1),D) Dynamic Size,A) O(n) time complexity,C) Less efficient deletion,A) O(n log n),C) Dynamic size,D) The value of each node is less than the values of its children,C) To maintain the height of the tree as small as possible,C) O(n log n),D) Reduced memory usage,B) Fixed size,D) Dynamic size allocation,B) The value of the right child is less than its parent node,C) O(h),A) Database indexing
23070719,D) O(n log n),C) Contiguous Memory Requirement,D) O(1) time complexity,D) More complex operations,B) O(n),B) Efficient insertion and deletion,A) The value of each node is less than or equal to the values of its children,A) To reduce the height of the tree,A) O(n),A) Dynamic size,A) Expensive operations,A) Dynamic allocation and freeing of memory blocks,D) The value of the left child is equal to its parent node,D) O(1),B) Priority queues and scheduling systems
23070739,A) O(log n),C) Contiguous Memory Requirement,A) O(n) time complexity,A) Slower traversal,D) O(log n),D) Contiguous memory requirement,C) The value of each node is equal to the values of its children,B) To increase the height of the tree,C) O(n log n),D) Reduced memory usage,A) Expensive operations,A) Dynamic allocation and freeing of memory blocks,A) The value of the left child is greater than its parent node,B) O(log n),C) File system navigation
23070769,B) O(n),C) Contiguous Memory Requirement,D) O(1) time complexity,D) More complex operations,C) O(1),A) Faster search times,B) The value of each node is greater than or equal to the values of its children,C) To maintain the height of the tree as small as possible,B) O(log n),C) Fixed size,A) Expensive operations,C) Efficient searching,B) The value of the right child is less than its parent node,B) O(log n),A) Database indexing
23070620,B) O(n),A) Direct Access,B) O(log n) time complexity,A) Slower traversal,A) O(n log n),C) Dynamic size,A) The value of each node is less than or equal to the values of its children,D) To increase the number of nodes in the tree,D) O(1),A) Dynamic size,B) Fixed size,C) Efficient searching,C) The value of the left child is less than its parent node and the value of the right child is greater than its parent node,B) O(log n),B) Priority queues and scheduling systems
23070040,C) O(1),D) Dynamic Size,D) O(1) time complexity,D) More complex operations,C) O(1),D) Contiguous memory requirement,D) The value of each node is less than the values of its children,C) To maintain the height of the tree as small as possible,C) O(n log n),C) Fixed size,D) Dynamic size,B) Static allocation of memory blocks,C) The value of the left child is less than its parent node and the value of the right child is greater than its parent node,D) O(1),C) File system navigation
22070910,A) O(log n),C) Contiguous Memory Requirement,D) O(1) time complexity,C) Less efficient deletion,C) O(1),A) Faster search times,D) The value of each node is less than the values of its children,A) To reduce the height of the tree,C) O(n log n),A) Dynamic size,B) Fixed size,A) Dynamic allocation and freeing of memory blocks,D) The value of the left child is equal to its parent node,B) O(log n),C) File system navigation
23071234,A) O(log n),B) Fixed Size,C) O(n log n) time complexity,A) Slower traversal,A) O(n log n),D) Contiguous memory requirement,D) The value of each node is less than the values of its children,D) To increase the number of nodes in the tree,C) O(n log n),D) Reduced memory usage,D) Dynamic size,B) Static allocation of memory blocks,B) The value of the right child is less than its parent node,D) O(1),C) File system navigation
23070904,A) O(log n),D) Dynamic Size,D) O(1) time complexity,D) More complex operations,C) O(1),C) Dynamic size,B) The value of each node is greater than or equal to the values of its children,D) To increase the number of nodes in the tree,A) O(n),A) Dynamic size,D) Dynamic size,C) Efficient searching,A) The value of the left child is greater than its parent node,C) O(h),A) Database indexing
23071531,A) O(log n),B) Fixed Size,B) O(log n) time complexity,C) Less efficient deletion,A) O(n log n),A) Faster search times,B) The value of each node is greater than or equal to the values of its children,A) To reduce the height of the tree,D) O(1),A) Dynamic size,D) Dynamic size,A) Dynamic allocation and freeing of memory blocks,D) The value of the left child is equal to its parent node,C) O(h),D) Game development
23070081,D) O(n log n),C) Contiguous Memory Requirement,C) O(n log n) time complexity,A) Slower traversal,A) O(n log n),B) Efficient insertion and deletion,B) The value of each node is greater than or equal to the values of its children,A) To reduce the height of the tree,B) O(log n),C) Fixed size,C) Contiguous memory requirement,A) Dynamic allocation and freeing of memory blocks,A) The value of the left child is greater than its parent node,A) O(n),B) Priority queues and scheduling systems
23070398,D) O(n log n),B) Fixed Size,D) O(1) time complexity,A) Slower traversal,B) O(n),C) Dynamic size,A) The value of each node is less than or equal to the values of its children,C) To maintain the height of the tree as small as possible,A) O(n),A) Dynamic size,B) Fixed size,A) Dynamic allocation and freeing of memory blocks,B) The value of the right child is less than its parent node,C) O(h),B) Priority queues and scheduling systems
23070041,B) O(n),A) Direct Access,D) O(1) time complexity,D) More complex operations,B) O(n),B) Efficient insertion and deletion,A) The value of each node is less than or equal to the values of its children,C) To maintain the height of the tree as small as possible,D) O(1),A) Dynamic size,C) Contiguous memory requirement,D) Dynamic size allocation,B) The value of the right child is less than its parent node,C) O(h),A) Database indexing
23070550,D) O(n log n),D) Dynamic Size,C) O(n log n) time complexity,D) More complex operations,B) O(n),D) Contiguous memory requirement,C) The value of each node is equal to the values of its children,D) To increase the number of nodes in the tree,C) O(n log n),B) Contiguous memory requirement,C) Contiguous memory requirement,D) Dynamic size allocation,C) The value of the left child is less than its parent node and the value of the right child is greater than its parent node,D) O(1),C) File system navigation
23070375,D) O(n log n),C) Contiguous Memory Requirement,C) O(n log n) time complexity,A) Slower traversal,C) O(1),B) Efficient insertion and deletion,C) The value of each node is equal to the values of its children,B) To increase the height of the tree,C) O(n log n),D) Reduced memory usage,D) Dynamic size,A) Dynamic allocation and freeing of memory blocks,A) The value of the left child is greater than its parent node,D) O(1),C) File system navigation
23070532,C) O(1),B) Fixed Size,B) O(log n) time complexity,C) Less efficient deletion,D) O(log n),C) Dynamic size,B) The value of each node is greater than or equal to the values of its children,D) To increase the number of nodes in the tree,C) O(n log n),C) Fixed size,D) Dynamic size,D) Dynamic size allocation,A) The value of the left child is greater than its parent node,B) O(log n),A) Database indexing
23070372,A) O(log n),D) Dynamic Size,C) O(n log n) time complexity,B) Increased memory usage,C) O(1),D) Contiguous memory requirement,A) The value of each node is less than or equal to the values of its children,B) To increase the height of the tree,C) O(n log n),A) Dynamic size,D) Dynamic size,D) Dynamic size allocation,C) The value of the left child is less than its parent node and the value of the right child is greater than its parent node,C) O(h),D) Game development
23070882,B) O(n),A) Direct Access,A) O(n) time complexity,B) Increased memory usage,A) O(n log n),D) Contiguous memory requirement,A) The value of each node is less than or equal to the values of its children,A) To reduce the height of the tree,B) O(log n),D) Reduced memory usage,A) Expensive operations,A) Dynamic allocation and freeing of memory blocks,B) The value of the right child is less than its parent node,D) O(1),C) File system navigation
23070962,C) O(1),C) Contiguous Memory Requirement,C) O(n log n) time complexity,B) Increased memory usage,D) O(log n),C) Dynamic size,C) The value of each node is equal to the values of its children,C) To maintain the height of the tree as small as possible,B) O(log n),A) Dynamic size,B) Fixed size,C) Efficient searching,B) The value of the right child is less than its parent node,A) O(n),B) Priority queues and scheduling systems
23070426,D) O(n log n),A) Direct Access,B) O(log n) time complexity,B) Increased memory usage,A) O(n log n),D) Contiguous memory requirement,B) The value of each node is greater than or equal to the values of its children,C) To maintain the height of the tree as small as possible,A) O(n),B) Contiguous memory requirement,B) Fixed size,D) Dynamic size allocation,B) The value of the right child is less than its parent node,D) O(1),D) Game development
23071121,C) O(1),A) Direct Access,D) O(1) time complexity,B) Increased memory usage,B) O(n),C) Dynamic size,D) The value of each node is less than the values of its children,A) To reduce the height of the tree,A) O(n),C) Fixed size,C) Contiguous memory requirement,C) Efficient searching,D) The value of the left child is equal to its parent node,D) O(1),D) Game development
23070744,D) O(n log n),B) Fixed Size,B) O(log n) time complexity,A) Slower traversal,A) O(n log n),B) Efficient insertion and deletion,C) The value of each node is equal to the values of its children,D) To increase the number of nodes in the tree,D) O(1),B) Contiguous memory requirement,D) Dynamic size,D) Dynamic size allocation,B) The value of the right child is less than its parent node,A) O(n),B) Priority queues and scheduling systems
23071489,D) O(n log n),D) Dynamic Size,D) O(1) time complexity,C) Less efficient deletion,A) O(n log n),D) Contiguous memory requirement,D) The value of each node is less than the values of its children,D) To increase the number of nodes in the tree,D) O(1),C) Fixed size,B) Fixed size,D) Dynamic size allocation,A) The value of the left child is greater than its parent node,C) O(h),B) Priority queues and scheduling systems
23070351,D) O(n log n),B) Fixed Size,A) O(n) time complexity,B) Increased memory usage,C) O(1),B) Efficient insertion and deletion,A) The value of each node is less than or equal to the values of its children,B) To increase the height of the tree,C) O(n log n),B) Contiguous memory requirement,A) Expensive operations,B) Static allocation of memory blocks,B) The value of the right child is less than its parent node,B) O(log n),D) Game development
23071114,D) O(n log n),A) Direct Access,D) O(1) time complexity,C) Less efficient deletion,B) O(n),A) Faster search times,B) The value of each node is greater than or equal to the values of its children,B) To increase the height of the tree,A) O(n),D) Reduced memory usage,C) Contiguous memory requirement,C) Efficient searching,A) The value of the left child is greater than its parent node,D) O(1),C) File system navigation
23070387,D) O(n log n),A) Direct Access,B) O(log n) time complexity,A) Slower traversal,B) O(n),A) Faster search times,C) The value of each node is equal to the values of its children,C) To maintain the height of the tree as small as possible,B) O(log n),C) Fixed size,C) Contiguous memory requirement,C) Efficient searching,C) The value of the left child is less than its parent node and the value of the right child is greater than its parent node,B) O(log n),B) Priority queues and scheduling systems
23071058,A) O(log n),D) Dynamic Size,A) O(n) time complexity,A) Slower traversal,A) O(n log n),A) Faster search times,C) The value of each node is equal to the values of its children,A) To reduce the height of the tree,C) O(n log n),D) Reduced memory usage,D) Dynamic size,B) Static allocation of memory blocks,B) The value of the right child is less than its parent node,C) O(h),A) Database indexing
23071561,A) O(log n),C) Contiguous Memory Requirement,A) O(n) time complexity,D) More complex operations,B) O(n),C) Dynamic size,D) The value of each node is less than the values of its children,C) To maintain the height of the tree as small as possible,D) O(1),A) Dynamic size,A) Expensive operations,C) Efficient searching,A) The value of the left child is greater than its parent node,C) O(h),D) Game development
23071453,D) O(n log n),A) Direct Access,C) O(n log n) time complexity,A) Slower traversal,D) O(log n),C) Dynamic size,C) The value of each node is equal to the values of its children,A) To reduce the height of the tree,C) O(n log n),A) Dynamic size,A) Expensive operations,C) Efficient searching,D) The value of the left child is equal to its parent node,A) O(n),B) Priority queues and scheduling systems